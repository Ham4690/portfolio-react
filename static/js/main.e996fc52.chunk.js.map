{"version":3,"sources":["components/Header.js","components/Profile.js","components/Main.js","components/App.js","components/Footer.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Profile","src","Main","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAeeA,E,iLAXX,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,eACb,+C,GALWC,IAAMC,WCoCZC,E,uNAXX,OACE,yBAAMH,UAAU,WACd,yBAAKA,UAAU,gBACb,yBAAKI,IAVM,kBAYb,uD,GA9BcH,IAAMC,WCebG,E,iLAZX,OACE,yBAAKL,UAAU,QACb,wCACA,kBAAC,EAAD,W,GALWC,IAAMC,WCiBVI,GClBML,IAAMC,U,iLDKvB,OACE,kBAAC,IAAMK,SAAP,KACE,kBAAC,EAAD,MAKA,kBAAC,EAAD,W,GATUN,IAAMC,Y,MEOJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e996fc52.chunk.js","sourcesContent":["import React from 'react'\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className='header'>\n        <div className='header-logo'>\n          <h2>Portfolio</h2>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Header","import React from 'react'\n\nclass Profile extends React.Component {\n\n  renderInfo() {\n    // return _.map(this.props.events, event => (\n    //   <TableRow key={event.id}>\n    //     <TableRowColumn>{event.id}</TableRowColumn>\n    //     <TableRowColumn>\n    //       <Link to={`/events/${event.id}`}>\n    //         {event.title}\n    //       </Link>\n    //     </TableRowColumn>\n    //     <TableRowColumn>{event.body}</TableRowColumn>\n    //   </TableRow>\n    // )\n  }\n\n\n  render() {\n    const myIconPath=\"img/main.jpg\"\n    const myInfo = {\n      name: \"東口 新\",\n      school: \"京都工芸繊維大学\",\n      hoby: \"ボードゲーム, 散歩, 読書\"\n    }\n\n    return (\n      <div  className='profile'>\n        <div className='profile-icon'>\n          <img src={myIconPath}/>\n        </div>\n        <h1>東口新</h1>\n      </div>\n    )\n  }\n}\n\nexport default Profile","import React from 'react'\nimport Profile from './Profile'\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className='main'>\n        <p>Main test</p>\n        <Profile />\n        {/* <Profile />\n        <Experience />\n        <Contact /> */}\n      </div>\n    )\n  }\n}\n\nexport default Main","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        {/* <Footer /> */}\n        {/* <Header />\n        <Main />\n        <Footer /> */}\n        <Main />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className='footer'>\n        <div className='footer-inner'>\n          <p>Footer test</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Footer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}