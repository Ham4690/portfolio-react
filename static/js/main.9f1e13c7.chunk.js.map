{"version":3,"sources":["components/Header.js","components/Work.js","components/Profile.js","components/Main.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Work","props","state","isModalOpen","this","setState","modal","name","src","introduction_image","introduction","onClick","handleClickClose","handleClickLesson","image","Profile","Fragment","map","lessonItem","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAeeA,E,iLAXX,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,eACb,+C,GALWC,IAAMC,WCqDZC,E,YApDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,aAAa,GAFV,E,iFAMjBC,KAAKC,SAAS,CAACF,aAAa,M,yCAI5BC,KAAKC,SAAS,CAACF,aAAa,M,+BAGpB,IACJG,EADG,OAwBP,OAtBIF,KAAKF,MAAMC,cACbG,EACE,yBAAKT,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,sBACb,4BAAKO,KAAKH,MAAMM,MAChB,yBAAKC,IAAKJ,KAAKH,MAAMQ,qBACrB,2BAAIL,KAAKH,MAAMS,eAGjB,4BACEb,UAAU,kBACVc,QAAS,WAAO,EAAKC,qBAFvB,yBAYN,yBAAKf,UAAU,eACb,yBACEA,UAAU,cACVc,QAAS,WAAO,EAAKE,sBAErB,2BAAIT,KAAKH,MAAMM,MACf,yBAAKC,IAAKJ,KAAKH,MAAMa,SAEtBR,O,GA/CUR,IAAMC,WCqDVgB,E,iLA3BX,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKW,IA1BI,kBA4BX,kDACA,qJAGF,yBAAKX,UAAU,oBA/BA,CACjB,CACEU,KAAM,UACNO,MAAO,uBACPJ,aAAc,uTACdD,mBAAoB,uBAEtB,CACEF,KAAM,WACNO,MAAO,wBACPJ,aAAc,wIACdD,mBAAoB,wBAEtB,CACEF,KAAM,YACNO,MAAO,oBACPJ,aAAc,+QACdD,mBAAoB,uBAeNQ,KAAI,SAACC,GACf,OACE,kBAAC,EAAD,CACEX,KAAMW,EAAWX,KACjBO,MAAOI,EAAWJ,MAClBJ,aAAcQ,EAAWR,aACzBD,mBAAoBS,EAAWT,8B,GA1CzBX,IAAMC,WCUboB,E,iLARX,OACE,yBAAKtB,UAAU,QACb,kBAAC,EAAD,W,GAJWC,IAAMC,WCWVqB,E,iLAVX,OACE,yBAAKvB,UAAU,UACb,yBAAKA,UAAU,gBACb,gE,GALWC,IAAMC,WCmBZsB,E,iLAdX,OACE,kBAAC,IAAML,SAAP,KACE,kBAAC,EAAD,MAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVUlB,IAAMC,W,MCOJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f1e13c7.chunk.js","sourcesContent":["import React from 'react'\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className='header'>\n        <div className='header-logo'>\n          <h2>Portfolio</h2>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Header","import React from 'react'\n\nclass Work extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {isModalOpen: false}\n  }\n\n  handleClickLesson() {\n    this.setState({isModalOpen: true})\n  }\n\n  handleClickClose() {\n    this.setState({isModalOpen: false})\n  }\n\n  render() {\n    let modal\n    if (this.state.isModalOpen) {\n      modal = (\n        <div className='modal'>\n          <div className='modal-inner'>\n            <div className='modal-header'></div>\n            <div className='modal-introduction'>\n              <h2>{this.props.name}</h2>\n              <img src={this.props.introduction_image} />\n              <p>{this.props.introduction}</p>\n            </div>\n            {/* onClickイベントを追加してください */}\n            <button\n              className='modal-close-btn'\n              onClick={() => {this.handleClickClose()}}\n            >\n              とじる\n            </button>\n          </div>\n        </div>\n      )\n    }\n\n    return(\n      <div className='lesson-card'>\n        <div\n          className='lesson-item'\n          onClick={() => {this.handleClickLesson()}}\n        >\n          <p>{this.props.name}</p>\n          <img src={this.props.image} />\n        </div>\n        {modal}\n      </div>\n    ) \n  }\n}\n\nexport default Work","import React from 'react'\nimport Work from './Work'\n\nclass Profile extends React.Component {\n\n  render() {\n    const myIconPath=\"img/main.jpg\"\n    const lessonList = [\n      {\n        name: 'Reversi',\n        image: 'img/reversi-icon.png',\n        introduction: 'WEBページはHTML、CSSという言語によってその見た目が作られています。 実際にWEBページを作りながら学んでみましょう！',\n        introduction_image: 'img/reversi-img.png',\n      },\n      {\n        name: 'LINE Bot',\n        image: 'img/LINE-BOT-icon.png',\n        introduction: 'SassはCSSをより便利に効率的にするための言語です。',\n        introduction_image: 'img/line-bot-img.jpg',\n      },\n      {\n        name: 'Ichigojam',\n        image: 'img/game-icon.png',\n        introduction: 'JavaScriptはフロントエンドだけでなく、サーバーサイドまで広い可能性を持つプログラミング言語です。',\n        introduction_image: 'img/ichigo-img.png',\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className='profile'>\n          <div className='profile-icon'>\n            <img src={myIconPath}/>\n          </div>\n          <h1>東口新</h1>\n          <h2>京都工芸繊維大学 工芸科学科 情報工学課程</h2>\n          \n        </div>\n        <div className='lesson-container'>\n          {lessonList.map((lessonItem) => {\n            return (\n              <Work\n                name={lessonItem.name}\n                image={lessonItem.image}\n                introduction={lessonItem.introduction}\n                introduction_image={lessonItem.introduction_image}\n              />\n            )\n          })}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Profile","import React from 'react'\nimport Profile from './Profile'\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className='main'>\n        <Profile />\n      </div>\n    )\n  }\n}\n\nexport default Main","import React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className='footer'>\n        <div className='footer-inner'>\n          <p>(c) 2020 Higashiguchi Arata</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Footer","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        {/* <Footer /> */}\n        {/* <Header />\n        <Main />\n        <Footer /> */}\n        <Main />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}